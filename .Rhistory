y=c(5:10)
m=cbind(x,y)
m
install.packages("car")
search()
setwd("C:\\epsychog\\Trainings & Events\\Data Science\\Statistics One\\Labs")
install.packages(“psych”)
getwd()
install.packages("swirl")
exit
install.packages("swirl")
library(swirl)  # Loads swirl
swirl()  # Runs swirl
swirl()
swirl()
library (swirl)
swirl()
install_from_swirl("Course_Directory")
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(devtools)
library(httr)
set_config(use_prox(url="http://wpad/wpad.dat",port=8080,username="XXX",password="XXX"))
install.packages("devtools")
library(devtools)
set_config(use_prox(url="http://wpad/wpad.dat",port=8080,username="XXX",password="XXX"))
set_config(use_proxy(url="http://wpad/wpad.dat",port=8080,username="XXX",password="XXX"))
swirl()
library(swirl)
swirl()
swirl()
libary(swirl)
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
sqrt(z-1)
mySqrt <- sqrt(z-1)
mySqrt
myDic <- z/mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
seq(1:length(my_seq))
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,time=40)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char,"Effi")
my_name
paste(my_name, collapse=" ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X", "Y", "Z"), sep=" ")
paste(c(1,2,3),c("X", "Y", "Z"), sep=" ")
paste(1:3,c("X", "Y", "Z"), sep="")
paster(LETTERS, 1:4, sep="-")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData<-sample(c(y,z),100)
is.na(myData)
myNA<-is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[in.na(x)]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(myMatrix,myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData <- data.frame(patients,myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData) <- cnames
myData
bye()
install.packages("KernSmooth")
library(KernSmooth)
find.package("devtools")
install.packages("devtools")
library(devtools)
find.package("devtools")
install.packages("slidify")
install.packages("ffplot")
install.packages("ggplot2")
find_rtools()
library(BiocInstaller)
bicvalid()
biocvalid()
biocValid()
biocLite()
biocLite("rhdf5")
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&h=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(httr)
?sqldf
R.home()
princomp(USArrests, cor = TRUE)
USArrests
USArrests
princomp(USArrests, cor = TRUE)
str(princomp(USArrests, cor = TRUE))
install.packages("OREembed")
install.packages("ore")
Sys.getlocale()
wday("25-08-1967")
wday("08-25-1967")
library(lubridate)
wday("25-08-1967")
wday("25-08-1967",label=TRUE)
wday("08-25-1967",label=TRUE)
wday("25-08-1967",label=TRUE)
x <- as.Date("1967-08-25")
wday(x,label=TRUE)
Sys.getenv()
weekday(x,label=TRUE)
weekdays(x,label=TRUE)
weekdays(x)
yday(x,label=TRUE)
mday(x,label=TRUE)
yday(x)
mday(x)
x
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1 <- rnorm(100)
x2 <- rnorm(100)
y <- 0.5+2*x1+6*x2
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
$by.total
summaryRProf()
summaryRprof()
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(5)
rpois(5, 2)
qnorm(.95, mean = 1100, sd = 75)
qnorm(.95, mean = 100, sd = 75)
qnorm(.95, mean = 1100, sd = (75/10))
qnorm(.95, mean = 1100, sd = 7,5)
75/10
qnorm(.95, mean = 1100, sd = 7.5)
qnorm(.95, mean = 1100, sd = (75/10))
choose(5, 4) * .5 ^ 5 + choose(5, 5) * .5 ^ 5
pbinom(3, size = 5, prob = .5, lower.tail = FALSE)
ppois(10, lambda = 5 * 3)
pnorm (70,m=80,sd=10)
pnorm(16,m=15,sd=10)-pnorm(14,m=15,sd=10)
pnorm(16,m=15,sd=1)-pnorm(14,m=15,sd=1)
empty=c()
for (i in 1:1000){
x<-runif(100,0,1)
mean<-mean(x)
empty<-c(empty,mean)
}
sd(empty)
choose(3,9)
choose(9,3)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
Diet
BodyWeight
BodyWeight$Diet
unique(BodyWeight$Diet)
names(BodyWeight)
unique(BodyWeight$Rat)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(lattice)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
library(ggplot2)
library(lubridate)
# Move to the project directory & load the data
setwd('C:\\epsychog\\Trainings & Events\\Data Science\\Data Science Specialisation (coursera)\\5. Reproducible Research\\RepData_PeerAssessment1')
data <- read.csv("activity.csv")
# Make a data frame with the total steps taken per day.
# Ignore dates with missing (NA) values
stepsByDate <- aggregate(steps~date,data=data, sum, na.action=na.omit)
# Make a data frame with the steps taken per 5-min interval.
# Ignore dates with missing (NA) values
stepsByIntAvg <- aggregate(steps~interval,data=data, mean, na.action=na.omit)
ggplot(stepsByDate, aes(x=date, y=steps)) +
geom_histogram(colour="blue", stat="identity", fill="lightblue") +
theme(text = element_text(size=15, colour="red"),
axis.text.x = element_text(angle=90, vjust=1)) +
labs(title = "Total # of Steps/Day")
aggregate(steps~date,data=stepsByDate,mean)
aggregate(steps~date,data=stepsByDate,median)
ggplot(stepsByIntAvg, aes(x=interval, y=steps)) +
geom_line(colour = "blue") +
labs(title = "Average # of Steps per 5-min Interval") +
theme(text = element_text(size=15, colour="red"))
stepsByIntAvg$interval[stepsByIntAvg$steps==max(stepsByIntAvg$steps)]
indNA <- which(is.na(data), arr.ind=TRUE)
data[indNA[,1],"interval"]
length(indNA)
length(indNA[1,])
length(indNA[,1])
indNA[,1]
data[indNA[,1],]$steps
data[indNA[,1],]$interval
m <- data
m[indNA[,1],]$interval
stepsByIntAvg$interval
stepsByIntAvg$steps[stepsByIntAvg$interval==05]
stepsByIntAvg$steps[stepsByIntAvg$interval==m[indNA[,1],]$interval]
unique(m[indNA[,1],]$interval)
length(m[indNA[,1],]$interval)
replace(m,is.na(m), aggregate(steps~date,data=stepsByDate,mean))
is.na(m)
sum(is.na(m))
is.na(m)
is.na(m$steps)
aggregate(steps~date,data=stepsByDate,mean)
aggregate(steps~date,data=stepsByDate,mean)
x <- aggregate(steps~interval,data=data, mean, na.action=na.omit)
x$steps[x$interval==indNA]
x$steps[x$interval==m$[indNA[,1],]
x$steps[x$interval==m$[indNA[,1],]]
x$steps[x$interval==m$[indNA[,1],"interval"]]
x$steps[x$interval==m$[indNA[,1],"interval"],]
x[data[indNA[,1],"interval"],]
x[is.na(m),"interval"],]
data[indNA[,1],"interval"]
length(data[indNA[,1],"interval"])
x[x$interval == data[indNA[,1],"interval"]]
x
x[x$interval == data[indNA[,1],"interval"],1]
x$interval
length(x$interval)
length(data[indNA[,1],"interval"])
length(data)
length(data$steps)
data$steps[1]
is.na(data$steps[1])
is.na(data$interval[1])
data$interval[1]
stepsByIntAvg$steps[interval == data$interval[1]]
stepsByIntAvg$steps[stepsByIntAvg$interval == data$interval[1]]
dataNoNA <- data
for i in 1:length(data$steps) {
if(is.na(data$steps[i])) {
dataNoNA$steps[i] <-
stepsByIntAvg$steps[stepsByIntAvg$interval == data$interval[1]]
}
}
dataNoNA <- data
for i in 1:length(data$steps) {
if(is.na(data$steps[i])) {
dataNoNA$steps[i] <-
stepsByIntAvg$steps[stepsByIntAvg$interval == data$interval[i]]
}
}
dataNoNA <- data
for (i in 1:length(data$steps)) {
if(is.na(data$steps[i])) {
dataNoNA$steps[i] <-
stepsByIntAvg$steps[stepsByIntAvg$interval == data$interval[i]]
}
}
sum(is.na(data))
sum(is.na(dataNoNA))
stepsByDate2 <- aggregate(steps~dateNoNA,data=dataNoNA, sum, na.action=na.omit)
stepsByDate2 <- aggregate(steps~dataNoNA,data=dataNoNA, sum, na.action=na.omit)
dataNoNA
stepsByDate2 <- aggregate(steps~dataNoNA,data=dataNoNA, sum, na.action=na.omit)
stepsByDate2 <- aggregate(steps~date,data=dataNoNA, sum, na.action=na.omit)
stepsByDate2 <- aggregate(steps~date,data=dataNoNA, sum, na.action=na.omit)
ggplot(stepsByDate2, aes(x=date, y=steps)) +
geom_histogram(colour="blue", stat="identity", fill="lightblue") +
theme(text = element_text(size=15, colour="red"),
axis.text.x = element_text(angle=90, vjust=1)) +
labs(title = "Total # of Steps/Day")
aggregate(steps~date,data=stepsByDate2,mean)
aggregate(steps~date,data=stepsByDate2,median)
length(aggregate(steps~date,data=stepsByDate2,mean))
stepsByDate <- aggregate(steps~date,data=data, sum, na.action=na.omit)
# Make a data frame with the steps taken per 5-min interval.
# Ignore dates with missing (NA) values
stepsByIntAvg <- aggregate(steps~interval,data=data, mean, na.action=na.omit)
ggplot(stepsByDate, aes(x=date, y=steps)) +
geom_histogram(colour="blue", stat="identity", fill="lightblue") +
theme(text = element_text(size=15, colour="red"),
axis.text.x = element_text(angle=90, vjust=1)) +
labs(title = "Total # of Steps/Day")
ggplot(stepsByDate2, aes(x=date, y=steps)) +
geom_histogram(colour="blue", stat="identity", fill="lightgreen") +
theme(text = element_text(size=15, colour="red"),
axis.text.x = element_text(angle=90, vjust=1)) +
labs(title = "Total # of Steps/Day")
ggplot(stepsByDate2, aes(x=date, y=steps)) +
geom_histogram(colour="green", stat="identity", fill="lightgreen") +
theme(text = element_text(size=15, colour="red"),
axis.text.x = element_text(angle=90, vjust=1)) +
labs(title = "Total # of Steps/Day")
ggplot(stepsByDate2, aes(x=date, y=steps)) +
geom_histogram(colour="darkgreen", stat="identity", fill="lightgreen") +
theme(text = element_text(size=15, colour="red"),
axis.text.x = element_text(angle=90, vjust=1)) +
labs(title = "Total # of Steps/Day")
ggplot(stepsByDate2, aes(x=date, y=steps)) +
geom_histogram(colour="darkgreen", stat="identity", fill="lightgreen") +
theme(text = element_text(size=15, colour="blue"),
axis.text.x = element_text(angle=90, vjust=1)) +
labs(title = "Total # of Steps/Day")
stepsByDate
mean(stepsByDate$steps)
mean(stepsByDate$steps)
median(stepsByDate$steps)
avg1 <- stepsByIntAvg$interval[stepsByIntAvg$steps==max(stepsByIntAvg$steps)]
avg1
mean2 <- mean(stepsByDate$steps2)
median2 <- median(stepsByDate$steps2)
mean2 <- mean(stepsByDate2$steps)
median2 <- median(stepsByDate2$steps)
mean1 <- mean(stepsByDate$steps)
median1 <- median(stepsByDate$steps)
mean1 mean2 median1 median2
mean1
mean2
median1
median2
weekdays(dataNoNA$date)
date
dataNoNA$date
weekdays(dataNoNA$date)
weekdays(as.date(dataNoNA$date))
as.date(dataNoNA$date)
weekdays(as.Date(dataNoNA$date))
Sys.setlocale('C')
Sys.setlocale("C")
Sys.setlocale(locale = "C")
weekdays(as.Date(dataNoNA$date))
weekdays(as.Date(dataNoNA$date))==c("Saturday","Sunday")
m <- dataNoNA
m$we[weekdays(as.Date(dataNoNA$date))==c("Saturday","Sunday")] <- "weekend"
m
m$we[!weekdays(as.Date(dataNoNA$date))==c("Saturday","Sunday")] <- "weekday"
m
View(m)
head(m,n=300)
weekday("2012-10-02")
weekdays("2012-10-02")
weekdays(as.Date("2012-10-02"))
m <- dataNoNA
m
m$we[weekdays(as.Date(dataNoNA$date))=="Saturday"]
m$we[weekdays(as.Date(dataNoNA$date)) %in% c("Saturday","Sunday")] <- "weekend"
m$we[!weekdays(as.Date(dataNoNA$date)) %in% c("Saturday","Sunday")] <- "weekday"
m
weekdays(as.Date("2012-10-07"))
weekdays(as.Date("2012-10-09"))
m[we=="weekend"]
m[m$we=="weekend"]
m[m$we=="weekend",]
unique(m[m$we=="weekend",])
weekdays(as.Date("2012-11-03 "))
weekdays(as.Date("2012-10-28"))
class(m$we)
m$we[weekdays(as.Date(dataNoNA$date)) %in% c("Saturday","Sunday")] <- as.factor("weekend")
m$we[!weekdays(as.Date(dataNoNA$date)) %in% c("Saturday","Sunday")] <- as.factor("weekday")
class(m$we)
m$we[weekdays(as.Date(dataNoNA$date)) %in% c("Saturday","Sunday")] <-"weekend"
m <- dataNoNA
m$we[weekdays(as.Date(dataNoNA$date)) %in% c("Saturday","Sunday")] <-"weekend"
m$we[!weekdays(as.Date(dataNoNA$date)) %in% c("Saturday","Sunday")] <-"weekday"
m$we <- as.factor(m$we)
class(m$we)
dataNoNA$we[weekdays(as.Date(dataNoNA$date)) %in% c("Saturday","Sunday")] <-"weekend"
dataNoNA$we[!weekdays(as.Date(dataNoNA$date)) %in% c("Saturday","Sunday")] <-"weekday"
dataNoNA$we <- as.factor(dataNoNA$we)
aggregate(steps~interval,data=dataNoNA, mean, na.action=na.omit)
aggregate(steps~interval+we,data=dataNoNA, mean, na.action=na.omit)
str(dataNoNA)
summary(dataNoNA)
aggregate(steps~interval+we,data=dataNoNA, mean)
aggregate(steps~we+interval,data=dataNoNA, mean)
aggregate(x=dataNoNA, by = list (interval,we), FUN="mean")
aggregate(steps~.,data=dataNoNA, mean)
x <- aggregate(steps~.,data=dataNoNA, mean)
x[1:500]
x[1:500,]
x[1:1000,]
xyplot(interval~steps|we, data=dataNoNA, layout(2,1))
library("lattice")
xyplot(interval~steps|we, data=dataNoNA, layout(2,1))
xyplot(interval~steps|we, data=dataNoNA, layout = c(2,1))
xyplot(interval~steps|we, data=dataNoNA, type = "l", layout = c(1,2))
xyplot(steps~interval|we, data=dataNoNA, type = "l", layout = c(1,2))
xyplot(steps~interval|we, data=x, type = "l", layout = c(1,2))
aggregate(steps~interval+we,data=dataNoNA, mean)
x <- aggregate(steps~interval+we,data=dataNoNA, mean)
xyplot(steps~interval|we, data=x, type = "l", layout = c(1,2))
install.packages("knitr", lib="C:/Program Files/R/R-3.0.3/library")
median1
mean1
class(median1)
The MEAN of the total # steps per day is (with missing values): **`r round(mean1,2)`**
The MEDIAN of the total # steps per day is (with missing values): **`r round(median1,2)`**
as.integer(median1)
mean1
median1
as.integer(mean1)
as.float(mean1)
as.real(mean1)
as.is(median1)
as.character(mean1)
round(as.character(mean1),2)
